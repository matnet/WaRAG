from flask import Flask, request, jsonify
import os
import base64
from datetime import datetime
import uuid
import json
from langchain.vectorstores import Chroma
from langchain.embeddings.openai import OpenAIEmbeddings
from langchain.chat_models import ChatOpenAI
from langchain.chains import RetrievalQA
from langchain.prompts import PromptTemplate
from langchain.docstore.document import Document
from dotenv import load_dotenv
from pdf_processor import extract_text_from_pdf, process_pdf_from_bytes
import logging

# Load environment variables
load_dotenv()

# Configure logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

app = Flask(__name__)

# Initialize OpenAI embeddings
embeddings = OpenAIEmbeddings(
    openai_api_key=os.getenv("OPENAI_API_KEY")
)

# Create directories for the vector database and temporary files
if not os.path.exists("./chroma_db"):
    os.makedirs("./chroma_db")
if not os.path.exists("./temp_files"):
    os.makedirs("./temp_files")

# Initialize vector store
vector_store = Chroma(
    collection_name="whatsapp_messages",
    embedding_function=embeddings,
    persist_directory="./chroma_db"
)

def format_datetime(timestamp):
    """Convert timestamp to readable format"""
    if isinstance(timestamp, int):
        return datetime.fromtimestamp(timestamp).strftime('%Y-%m-%d %H:%M:%S')
    return timestamp

@app.route('/')
def index():
    """Root route to provide API documentation and status"""
    return '''
    <html>
        <head>
            <title>WhatsApp RAG API</title>
            <style>
                body {
                    font-family: Arial, sans-serif;
                    max-width: 800px;
                    margin: 0 auto;
                    padding: 20px;
                }
                h1 {
                    color: #075e54;
                }
                .endpoint {
                    background-color: #f3f3f3;
                    padding: 10px;
                    margin: 10px 0;
                    border-radius: 5px;
                }
                pre {
                    background-color: #e5e5e5;
                    padding: 10px;
                    overflow: auto;
                }
            </style>
        </head>
        <body>
            <h1>WhatsApp RAG API</h1>
            <p>This API provides endpoints for storing WhatsApp messages, indexing PDFs, and querying the RAG system.</p>
            
            <div class="endpoint">
                <h2>Store Message</h2>
                <p><strong>Endpoint:</strong> POST /store-message</p>
            </div>
            
            <div class="endpoint">
                <h2>Process PDF</h2>
                <p><strong>Endpoint:</strong> POST /process-pdf</p>
            </div>
            
            <div class="endpoint">
                <h2>Query RAG</h2>
                <p><strong>Endpoint:</strong> POST /query-rag</p>
            </div>
            
            <div class="endpoint">
                <h2>Health Check</h2>
                <p><strong>Endpoint:</strong> GET /health</p>
            </div>
            
            <p>API Status: <strong style="color: green">Running</strong></p>
        </body>
    </html>
    '''

@app.route('/store-message', methods=['POST'])
def store_message():
    """API endpoint to store WhatsApp messages in the vector database"""
    try:
        data = request.json
        
        # Extract message data
        message_id = data.get('messageId', 'unknown_id')
        sender = data.get('sender', 'unknown_sender')
        sender_name = data.get('senderName', 'Unknown')
        content = data.get('content', '')
        timestamp = data.get('timestamp', int(datetime.now().timestamp()))
        is_group = data.get('isGroup', False)
        
        # Prepare metadata for the document
        metadata = {
            "source": "whatsapp_message",
            "message_id": message_id,
            "sender": sender,
            "sender_name": sender_name,
            "timestamp": timestamp,
            "datetime": format_datetime(timestamp),
            "is_group": is_group
        }
        
        # Create document
        doc = Document(page_content=content, metadata=metadata)
        
        # Add to vector store
        vector_store.add_documents([doc])
        vector_store.persist()
        
        logger.info(f"Stored message from {sender_name} ({message_id})")
        
        return jsonify({
            "success": True,
            "message": f"Successfully stored message {message_id}"
        })
    
    except Exception as e:
        logger.error(f"Error storing message: {str(e)}")
        return jsonify({
            "success": False,
            "error": str(e)
        }), 500

@app.route('/process-pdf', methods=['POST'])
def process_pdf():
    """API endpoint to process and index PDFs sent via WhatsApp"""
    try:
        data = request.json
        
        # Extract PDF data
        message_id = data.get('messageId', 'unknown_id')
        sender = data.get('sender', 'unknown_sender')
        sender_name = data.get('senderName', 'Unknown')
        pdf_data = data.get('pdfData', '')
        file_name = data.get('fileName', 'document.pdf')
        timestamp = data.get('timestamp', int(datetime.now().timestamp()))
        is_group = data.get('isGroup', False)
        
        if not pdf_data:
            logger.warning("PDF processing failed: No PDF data provided")
            return jsonify({
                "success": False,
                "error": "No PDF data provided"
            }), 400
        
        # Decode base64 PDF data and process
        try:
            logger.info(f"Processing PDF: {file_name} from {sender_name}")
            
            # Decode base64 PDF data
            pdf_bytes = base64.b64decode(pdf_data)
            
            # Use the new function to process PDF directly from bytes
            documents = process_pdf_from_bytes(pdf_bytes, filename=file_name)
            
            # If no documents were extracted, return an error
            if not documents:
                logger.warning(f"No text extracted from PDF: {file_name}")
                raise ValueError(f"Could not extract any text from PDF: {file_name}")
            
            # Count unique pages
            unique_pages = set(doc.metadata.get('page', 0) for doc in documents)
            logger.info(f"Extracted {len(documents)} chunks from {len(unique_pages)} pages")
            
            # Add metadata to each document
            for doc in documents:
                doc.metadata.update({
                    "source": "whatsapp_pdf",
                    "message_id": message_id,
                    "sender": sender,
                    "sender_name": sender_name,
                    "timestamp": timestamp,
                    "datetime": format_datetime(timestamp),
                    "is_group": is_group
                })
            
            # Add to vector store
            vector_store.add_documents(documents)
            vector_store.persist()
            
            logger.info(f"Successfully processed PDF {file_name}")
            
            return jsonify({
                "success": True,
                "message": f"Successfully processed PDF {file_name}",
                "pages_processed": len(unique_pages),
                "chunks_processed": len(documents)
            })
            
        except Exception as pdf_error:
            logger.error(f"Error processing PDF: {str(pdf_error)}")
            
            return jsonify({
                "success": False,
                "error": f"Error processing PDF: {str(pdf_error)}"
            }), 500
    
    except Exception as e:
        logger.error(f"Error in PDF processing endpoint: {str(e)}")
        return jsonify({
            "success": False,
            "error": str(e)
        }), 500

@app.route('/query-rag', methods=['POST'])
def query_rag():
    """API endpoint to query the RAG system"""
    try:
        data = request.json
        query = data.get('query', '')
        
        if not query:
            return jsonify({
                "success": False,
                "error": "No query provided"
            }), 400
        
        logger.info(f"Processing RAG query: {query}")
        
        # Create ChatOpenAI instance
        llm = ChatOpenAI(
            model_name="gpt-3.5-turbo",  # or "gpt-4" if you have access
            temperature=0.7,
            openai_api_key=os.getenv("OPENAI_API_KEY")
        )
        
        # Create custom prompt template
        prompt_template = """
        Answer the following question based on the provided context from WhatsApp messages and documents.
        
        Context:
        {context}
        
        Question: {question}
        
        Provide a concise and helpful answer based only on the information in the context. 
        If the context doesn't contain the answer, say "I don't have information about that in the conversation or document history."
        
        If the answer comes from a PDF document, mention the document name in your response.
        If multiple sources provide relevant information, synthesize the information from all relevant sources.
        
        Format your response in a clear, readable way.
        """
        
        PROMPT = PromptTemplate(
            template=prompt_template,
            input_variables=["context", "question"]
        )
        
        # Create retrieval chain with more results for better context
        qa_chain = RetrievalQA.from_chain_type(
            llm=llm,
            chain_type="stuff",
            retriever=vector_store.as_retriever(search_kwargs={"k": 8}),
            chain_type_kwargs={"prompt": PROMPT}
        )
        
        # Get response
        response = qa_chain({"query": query})
        answer = response.get('result', "I couldn't find an answer to your question.")
        
        logger.info(f"RAG query completed: {query[:50]}...")
        
        return jsonify({
            "success": True,
            "answer": answer,
            "query": query
        })
    
    except Exception as e:
        logger.error(f"Error processing query: {str(e)}")
        return jsonify({
            "success": False,
            "error": str(e)
        }), 500

@app.route('/health', methods=['GET'])
def health_check():
    """Simple health check endpoint"""
    try:
        # Check if vector store is accessible
        info = vector_store._collection.count()
        document_count = info
        
        return jsonify({
            "status": "healthy",
            "timestamp": datetime.now().isoformat(),
            "document_count": document_count,
            "openai_api_key_configured": bool(os.getenv("OPENAI_API_KEY"))
        })
    except Exception as e:
        logger.error(f"Health check failed: {str(e)}")
        return jsonify({
            "status": "unhealthy",
            "error": str(e),
            "timestamp": datetime.now().isoformat()
        }), 500

@app.route('/stats', methods=['GET'])
def get_stats():
    """Endpoint to get statistics about the RAG system"""
    try:
        # Get information about documents in the vector store
        stats = {
            "total_documents": vector_store._collection.count(),
            "timestamp": datetime.now().isoformat()
        }
        
        return jsonify(stats)
    except Exception as e:
        logger.error(f"Error fetching stats: {str(e)}")
        return jsonify({
            "success": False,
            "error": str(e)
        }), 500

if __name__ == '__main__':
    # Use port 5001 to avoid conflicts
    port = int(os.environ.get("PORT", 5001))
    logger.info(f"Starting WhatsApp RAG API on port {port}")
    app.run(host='0.0.0.0', port=port, debug=True)
